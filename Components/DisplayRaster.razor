@using Models;

<div class="raster-legend-pair">
    <div class="raster">
        @for (int i = 0; i < Raster.Col; i++)
        {
            <div class="raster-row">
                @for (int j = 0; j < Raster.Row; j++)
                {
                    double backgroundColorAlpha = Raster.DisplayColor ? (double)Raster.Grid[i, j].Color / Raster.MaxColor : (double)Raster.Grid[i, j].CurrentColor / Raster.MaxColor;

                    var localI = i;
                    var localJ = j;
  
                    string textColorString = backgroundColorAlpha > 0.5 ? "white" : "black";
                    string colorValue = Raster.DisplayValues ? Raster.Grid[i, j].Color.ToString() : string.Empty;
                    <div class="pixel @(Raster.CheckState && !Raster.Grid[i, j].ColorsMatch() ? "incorrect" : "")" @onclick="(()=>ChangePixelColor(localI, localJ))" style="background-color:rgba(0,0,0,@backgroundColorAlpha); color:@textColorString">@colorValue</div>
                }
            </div>
        }
    </div>

    <div class="raster legend">
        <div>legenda</div>
        @foreach (int color in Raster.ColorPallete) {
            <div class="raster-row">
                <div class="pixel">@color</div>
                <div class="pixel" @onclick="(()=>SelectBrushColor(color))" style="background-color:rgba(0,0,0,@((double)color / Raster.MaxColor));">
                </div>
            </div>
        }
    </div>

    <div>@currentBrushColor</div>
</div>

@code {
    [Parameter] public Raster Raster { get; set; }

    private int currentBrushColor = 0;

    private void SelectBrushColor(int color)
    {
        currentBrushColor = color;
    }

    private void ChangePixelColor(int i, int j)
    {
        Raster.Grid[i, j].ChangeCurrentColor(currentBrushColor);
        StateHasChanged();
    }
}
