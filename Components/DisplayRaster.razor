@using Models
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components

<div class="raster-with-check">
    <div class="raster-legend-pair">
        <div class="raster-grid">
            <div class="empty"></div>

            @if (ShowMismatchIndicators)
            {
                <div class="col-mismatched">
                    @for (int i = 0; i < Raster.Grid.Row; i++)
                    {
                        <div class="pixel">
                            @if (MismatchedColumns.Contains(i))
                            {
                                <span style="color: red;">X</span>
                            }
                        </div>
                    }
                </div>

                <div class="row-mismatched">
                    @for (int i = 0; i < Raster.Grid.Col; i++)
                    {
                        <div class="pixel">
                            @if (MismatchedRows.Contains(i))
                            {
                                <span style="color: blue;">X</span>
                            }
                        </div>
                    }
                </div>
            }

            <div class="raster">
                @for (int i = 0; i < Raster.Grid.Col; i++)
                {
                    <div class="raster-row">
                        @for (int j = 0; j < Raster.Grid.Row; j++)
                        {
                            double backgroundColorAlpha = Raster.DisplayColor ? (double)Raster.Grid.Pixels[i, j].Color / Raster.Grid.MaxColor : (double)Raster.Grid.Pixels[i, j].CurrentColor / Raster.Grid.MaxColor;

                            int I = i;
                            int J = j;

                            string textColorString = backgroundColorAlpha > 0.5 ? "white" : "black";
                            string colorValue = Raster.DisplayValues ? Raster.Grid.Pixels[i, j].Color.ToString() : string.Empty;
                            <div class="pixel" @onclick="(() => ChangePixelColor(I, J))" style="background-color: rgba(0,0,0,@backgroundColorAlpha); color: @textColorString;">
                                @colorValue
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <div class="color-palette-pair">
            <div class="color-palette-text">legenda:</div>
            <div class="color-palette">
                @foreach (int color in Raster.Grid.ColorPalette)
                {
                    <div class="raster-row">
                        <div class="pixel">@color</div>
                        <div class="pixel brush-select" @onclick="(() => SelectBrushColor(color))" style="background-color:rgba(0,0,0,@((double)color / Raster.Grid.MaxColor));"></div>
                    </div>
                }
            </div>
        </div>
    </div>

    @if (ShowMismatchIndicators)
    {
        <button class="check-color-btn" @onclick="CompareColors">Kontrola: @IsCorrect</button>
    }
</div>

@code {
    [Parameter] public ArrayRaster Raster { get; set; }
    [Parameter] public bool ShowMismatchIndicators { get; set; } = false;

    private HashSet<int> MismatchedRows { get; set; } = new HashSet<int>();
    private HashSet<int> MismatchedColumns { get; set; } = new HashSet<int>();
    private string IsCorrect = "???";

    private int currentBrushColor = 0;

    private void SelectBrushColor(int color)
    {
        currentBrushColor = color;
    }

    private void ChangePixelColor(int i, int j)
    {
        Raster.Grid.Pixels[i, j].ChangeCurrentColor(currentBrushColor);
        StateHasChanged();
    }

    private void CompareColors()
    {
        IsCorrect = Raster.Grid.ColorsMatchBool() ? "Správně!" : "Špatně";
        var (rows, cols) = Raster.Grid.ColorsMatch();
        MismatchedRows = new HashSet<int>(rows);
        MismatchedColumns = new HashSet<int>(cols);
    }
}